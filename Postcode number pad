import tkinter as tk
from tkinter import messagebox
from openpyxl import Workbook, load_workbook
from datetime import datetime
import os

# File name for the Excel spreadsheet
file_name = "postcode_visitors.xlsx"

# Check if the file exists; if not, create it with the appropriate headers
if not os.path.exists(file_name):
    workbook = Workbook()
    sheet = workbook.active
    sheet.title = "Visitors Data"
    sheet.append(["Date", "Postcode", "Number of Visitors"])
    workbook.save(file_name)
    print("Spreadsheet created successfully.")

# Function to add entry to the Excel file
def add_entry(postcode, number_of_visitors):
    try:
        workbook = load_workbook(file_name)
        sheet = workbook.active
        current_date = datetime.now().strftime("%Y-%m-%d")
        sheet.append([current_date, postcode, number_of_visitors])
        workbook.save(file_name)
        print(f"Entry added successfully: {current_date}, {postcode}, {number_of_visitors}")
    except Exception as e:
        print(f"Error saving data: {e}")

# Function to handle the "Enter" button click
def enter_data(event=None):
    postcode = postcode_entry.get().strip()
    visitors = visitors_entry.get().strip()

    # Log the current data for debugging
    print(f"Postcode entered: {postcode}, Visitors entered: {visitors}")

    # Check for missing values and display specific error messages
    if not postcode:
        messagebox.showwarning("Missing Value", "Please enter a postcode.")
        return
    if not visitors:
        messagebox.showwarning("Missing Value", "Please enter the number of visitors.")
        return

    # Validate numeric input
    if not postcode.isdigit() or not visitors.isdigit():
        messagebox.showwarning("Invalid Input", "Please enter valid numeric values for both the postcode and visitors.")
        return

    # Add the entry to the spreadsheet
    add_entry(postcode, int(visitors))
    
    # Clear the entry fields after adding data
    postcode_entry.delete(0, tk.END)
    visitors_entry.delete(0, tk.END)
    
    # Reset focus to the postcode entry field
    postcode_entry.focus()

def insert_number(number):
    if postcode_entry.focus_get() == postcode_entry:
        postcode_entry.insert(tk.END, number)
    elif visitors_entry.focus_get() == visitors_entry:
        visitors_entry.insert(tk.END, number)

def backspace():
    # Delete the last character in the focused entry field
    if postcode_entry.focus_get() == postcode_entry:
        postcode_entry.delete(len(postcode_entry.get()) - 1, tk.END)
    elif visitors_entry.focus_get() == visitors_entry:
        visitors_entry.delete(len(visitors_entry.get()) - 1, tk.END)

# Create the main GUI window
root = tk.Tk()
root.title("Postcode Visitor Entry")

# Create labels and entry fields
tk.Label(root, text="Enter Postcode:").grid(row=0, column=0, padx=10, pady=10)
postcode_entry = tk.Entry(root)
postcode_entry.grid(row=0, column=1, padx=10, pady=10)

tk.Label(root, text="Enter Number of Visitors:").grid(row=1, column=0, padx=10, pady=10)
visitors_entry = tk.Entry(root)
visitors_entry.grid(row=1, column=1, padx=10, pady=10)

# Create buttons for number pad
button_frame = tk.Frame(root)
button_frame.grid(row=2, column=0, columnspan=2, padx=10, pady=10)

buttons = [
    ('1', 1, 0), ('2', 1, 1), ('3', 1, 2),
    ('4', 2, 0), ('5', 2, 1), ('6', 2, 2),
    ('7', 3, 0), ('8', 3, 1), ('9', 3, 2),
    ('0', 4, 1)
]

for (text, row, col) in buttons:
    tk.Button(button_frame, text=text, width=5, command=lambda t=text: insert_number(t)).grid(row=row, column=col, padx=5, pady=5)

# Move the "Backspace" button to the bottom of the number pad
backspace_button = tk.Button(button_frame, text="Backspace", width=12, command=backspace)
backspace_button.grid(row=5, column=0, columnspan=2, padx=5, pady=5)

# Create the "Enter" button for the number pad
enter_button = tk.Button(button_frame, text="Enter", width=12, command=enter_data)
enter_button.grid(row=5, column=2, padx=5, pady=5)

# Bind the Enter key on the keyboard to the enter_data function
root.bind('<Return>', enter_data)

# Run the application
root.mainloop()
